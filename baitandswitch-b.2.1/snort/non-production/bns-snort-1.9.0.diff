diff -ruN ./snort-1.9.0/src/Makefile.in snort-1.9.0.orig+bns-diffs/src/Makefile.in
--- ./snort-1.9.0/src/Makefile.in	2002-10-01 20:54:39.000000000 -0500
+++ snort-1.9.0.orig+bns-diffs/src/Makefile.in	2003-02-07 21:07:18.000000000 -0500
@@ -123,7 +123,7 @@
 DEFS = @DEFS@ -I. -I$(srcdir) -I..
 CPPFLAGS = @CPPFLAGS@
 LDFLAGS = @LDFLAGS@
-LIBS = @LIBS@
+LIBS = @LIBS@ -lpthread
 snort_OBJECTS =  codes.o debug.o decode.o log.o mstring.o parser.o \
 plugbase.o snort.o snprintf.o strlcatu.o strlcpyu.o tag.o ubi_BinTree.o \
 ubi_SplayTree.o util.o detect.o substr.o trie.o signature.o mempool.o \
diff -ruN ./snort-1.9.0/src/output-plugins/Makefile.am snort-1.9.0.orig+bns-diffs/src/output-plugins/Makefile.am
--- ./snort-1.9.0/src/output-plugins/Makefile.am	2002-05-17 22:30:18.000000000 -0500
+++ snort-1.9.0.orig+bns-diffs/src/output-plugins/Makefile.am	2003-02-07 21:07:18.000000000 -0500
@@ -8,6 +8,7 @@
 spo_alert_smb.h spo_alert_syslog.c spo_alert_syslog.h spo_alert_unixsock.c     \
 spo_alert_unixsock.h spo_csv.c spo_csv.h spo_database.c spo_database.h         \
 spo_log_null.c spo_log_null.h spo_log_tcpdump.c spo_xml.c spo_xml.h            \
-spo_log_tcpdump.h spo_unified.c spo_unified.h spo_log_ascii.c spo_log_ascii.h
+spo_log_tcpdump.h spo_unified.c spo_unified.h spo_log_ascii.c spo_log_ascii.h  \
+spo_alert_bns.c spo_alert_bns.h
 
 INCLUDES = @INCLUDES@
diff -ruN ./snort-1.9.0/src/output-plugins/Makefile.in snort-1.9.0.orig+bns-diffs/src/output-plugins/Makefile.in
--- ./snort-1.9.0/src/output-plugins/Makefile.in	2002-10-01 20:54:41.000000000 -0500
+++ snort-1.9.0.orig+bns-diffs/src/output-plugins/Makefile.in	2003-02-07 21:07:18.000000000 -0500
@@ -75,7 +75,8 @@
 spo_alert_smb.h spo_alert_syslog.c spo_alert_syslog.h spo_alert_unixsock.c     \
 spo_alert_unixsock.h spo_csv.c spo_csv.h spo_database.c spo_database.h         \
 spo_log_null.c spo_log_null.h spo_log_tcpdump.c spo_xml.c spo_xml.h            \
-spo_log_tcpdump.h spo_unified.c spo_unified.h spo_log_ascii.c spo_log_ascii.h
+spo_log_tcpdump.h spo_unified.c spo_unified.h spo_log_ascii.c spo_log_ascii.h  \
+spo_alert_bns.c spo_alert_bns.h
 
 
 INCLUDES = @INCLUDES@
@@ -93,7 +94,7 @@
 libspo_a_OBJECTS =  spo_SnmpTrap.o spo_alert_fast.o spo_alert_full.o \
 spo_alert_smb.o spo_alert_syslog.o spo_alert_unixsock.o spo_csv.o \
 spo_database.o spo_log_null.o spo_log_tcpdump.o spo_xml.o spo_unified.o \
-spo_log_ascii.o
+spo_log_ascii.o spo_alert_bns.o
 AR = ar
 CFLAGS = @CFLAGS@
 COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
diff -ruN ./snort-1.9.0/src/output-plugins/spo_alert_bns.c snort-1.9.0.orig+bns-diffs/src/output-plugins/spo_alert_bns.c
--- ./snort-1.9.0/src/output-plugins/spo_alert_bns.c	1969-12-31 19:00:00.000000000 -0500
+++ snort-1.9.0.orig+bns-diffs/src/output-plugins/spo_alert_bns.c	2003-02-08 01:48:50.000000000 -0500
@@ -0,0 +1,235 @@
+/* spo_alert_bns
+ * 
+ * Purpose:  Output IP address via FIFO for BNS switchcore to poll
+ *
+ * Effect:	???
+ *
+ */
+
+#define DEBUG
+#define USE_THREADS
+#include "alert_bns.vars"
+#define TRUE 1
+#define FALSE 0
+
+/* output plugin header file */
+#include "spo_alert_bns.h"
+#include "snort.h"
+#include "event.h"
+
+#include <stdlib.h>
+#include <unistd.h>
+#ifdef USE_THREADS
+#include <pthread.h>
+#endif
+#ifndef WIN32
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+#endif
+
+/* external globals from rules.c */
+extern char *file_name;
+extern int file_line;
+
+char		ScriptName[1024];
+
+#ifdef USE_THREADS
+typedef struct ip_holder{
+	struct in_addr		IP;
+	struct ip_holder*	next;
+} IPHold;
+
+IPHold*  		bns_alert_head;
+pthread_mutex_t	bns_alert_mutex = PTHREAD_MUTEX_INITIALIZER;
+char			exit_bns_thread;
+pthread_t		alert_thread_id;
+
+void* BNSCallerFunc(void* v);
+void BNSCleanExitFunction(int signal, void* arg);
+void BNSRestartFunction(int signal, void* arg);
+#endif
+
+void SetupAlertBNS()
+{
+    /* link the preprocessor keyword to the init function in 
+       the preproc list */
+    RegisterOutputPlugin("alert_bns", NT_OUTPUT_ALERT, AlertBNSInit);
+
+#ifdef DEBUG
+    printf("Output plugin: AlertBNS is setup...\n");
+#endif
+}
+
+
+void AlertBNSInit(u_char *args)
+{
+#ifdef DEBUG
+    printf("Output: AlertBNS Initialized\n");
+#endif
+
+    pv.alert_plugin_active = 1;
+
+    /* parse the argument list from the rules file */
+    ParseAlertBNSArgs(args);
+
+
+#ifdef DEBUG
+    printf("Linking BNSAlert functions to call lists...\n");
+#endif
+
+#ifdef USE_THREADS
+	bns_alert_head=NULL;
+	exit_bns_thread=FALSE;
+	
+	pthread_create(&alert_thread_id, NULL, BNSCallerFunc, NULL);
+	
+    AddFuncToCleanExitList(BNSCleanExitFunction, NULL);
+    AddFuncToRestartList(BNSRestartFunction, NULL);
+#endif	
+
+    /* Set the preprocessor function into the function list */
+    AddFuncToOutputList(SpoAlertBNS, NT_OUTPUT_ALERT, NULL);
+}
+
+
+void ParseAlertBNSArgs(char *args)
+{
+#ifdef DEBUG
+    printf("ParseAlertBNSArgs: %s\n", args);
+#endif
+
+	/*TODO: make ScriptName not a global*/
+	
+	snprintf(ScriptName, sizeof ScriptName, args);
+	
+#ifdef DEBUG
+	printf("ScriptName is now %s\n",ScriptName);
+#endif	
+}
+
+/****************************************************************************
+*  use the system() call to execute a shell script
+****************************************************************************/
+void CallScript(struct in_addr ip){
+/*********Jacks Changes*********/
+
+	FILE *fp;
+
+	if((fp = fopen(FIFO_FILE, "w")) == NULL)
+       	{
+        	printf("fifo fucked up");
+        	exit(1);
+	}
+
+	fprintf (fp, "%s", inet_ntoa(ip));
+
+	fclose(fp);
+	printf("sending data: %s\n", inet_ntoa(ip));
+
+/********End Changes************/
+
+}
+
+/****************************************************************************
+ *
+ * Function: SpoBNSAlert(Packet *, char *)
+ *
+ * Arguments: p => pointer to the packet data struct
+ *            msg => the message to print in the alert
+ *
+ * Returns: void function
+ *
+ ***************************************************************************/
+void SpoAlertBNS(Packet *p, char *msg, void *arg, Event *event)
+{
+#ifndef USE_THREADS
+      printf("HEEEEEEEYYYYY");
+	CallScript(p->iph->ip_src);
+#else
+	IPHold*	this;
+	
+	/*put this on the list to be called*/
+	pthread_mutex_lock(&bns_alert_mutex);
+	if (!bns_alert_head){
+		bns_alert_head=calloc(sizeof(IPHold), 1);	
+		bns_alert_head->IP = p->iph->ip_src;
+	}else{
+		/*Seek to the end.  Hopefully this will be short*/
+		this = bns_alert_head;
+		while (this->next) this=this->next;
+		
+		/*stick the new one on the end*/
+		this->next=calloc(sizeof(IPHold),1);
+		this->next->IP = p->iph->ip_src;
+	}
+	pthread_mutex_unlock(&bns_alert_mutex);	
+#endif	
+}
+
+#ifdef USE_THREADS
+/************************************************************
+* This runs in the other thread to actually do the shell
+* calling.
+************************************************************/
+void* BNSCallerFunc(void* v){
+	IPHold*		e;
+	
+	while (!exit_bns_thread){
+		e=NULL;
+		pthread_mutex_lock(&bns_alert_mutex);
+		if (bns_alert_head){
+			/*pop the entry off*/
+			e=bns_alert_head;
+			bns_alert_head = bns_alert_head->next;
+		}
+		pthread_mutex_unlock(&bns_alert_mutex);
+		
+		if (e){
+			/*call the script*/
+			CallScript(e->IP);
+			
+			/*erase this*/
+			free(e);
+			e=NULL;
+		}
+		
+		usleep(10);
+	}
+	
+	return NULL;
+}
+
+void BNSCleanExitFunction(int signal, void* arg){
+#ifdef DEBUG
+	printf("Exiting BNS Output...\n");
+#endif
+
+	/*exit the logger thread*/
+	exit_bns_thread=TRUE;
+	
+	/*wait for the other thread to exit*/
+	pthread_join(alert_thread_id, NULL);
+	
+#ifdef DEBUG
+	printf("Done Exiting BNS Output...\n");
+#endif	
+}
+
+void BNSRestartFunction(int signal, void* arg){
+#ifdef DEBUG
+	printf("Restarting BNS Output...\n");
+#endif
+
+	/*exit the logger thread*/
+	exit_bns_thread=TRUE;
+	
+	/*wait for the other thread to exit*/
+	pthread_join(alert_thread_id, NULL);
+	
+#ifdef DEBUG
+	printf("Done Restarting BNS Output...\n");
+#endif	
+}
+
+#endif
diff -ruN ./snort-1.9.0/src/output-plugins/spo_alert_bns.h snort-1.9.0.orig+bns-diffs/src/output-plugins/spo_alert_bns.h
--- ./snort-1.9.0/src/output-plugins/spo_alert_bns.h	1969-12-31 19:00:00.000000000 -0500
+++ snort-1.9.0.orig+bns-diffs/src/output-plugins/spo_alert_bns.h	2003-02-08 01:49:06.000000000 -0500
@@ -0,0 +1,23 @@
+#ifndef __SPO_ALERT_BNS_H__
+#define __SPO_ALERT_BNS_H__
+
+#include "snort.h"
+#include "event.h"
+#include "plugbase.h"
+
+/* not used yet */
+typedef struct _SpoAlertBNSData
+{
+    char *filename;
+
+} SpoAlertBNSData;
+
+/* list of function prototypes for this preprocessor */
+void SetupAlertBNS();
+void AlertBNSInit(u_char *);
+void SpoAlertBNS(Packet *, char *, void *, Event *);
+void ParseAlertBNSArgs(char *);
+void SpoAlertBNSCleanExitFunc(int, void *);
+void SpoAlertBNSRestartFunc(int, void *);
+
+#endif  /* __SPO_ALERT_BNS_H__ */
diff -ruN ./snort-1.9.0/src/plugbase.c snort-1.9.0.orig+bns-diffs/src/plugbase.c
--- ./snort-1.9.0/src/plugbase.c	2002-08-12 16:01:42.000000000 -0500
+++ snort-1.9.0.orig+bns-diffs/src/plugbase.c	2003-02-08 01:33:54.000000000 -0500
@@ -99,6 +99,8 @@
 #include "output-plugins/spo_unified.h"
 #include "output-plugins/spo_log_null.h"
 #include "output-plugins/spo_log_ascii.h"
+#include "output-plugins/spo_alert_bns.h"
+
 #ifdef ENABLE_SNMP
     #include "output-plugins/spo_SnmpTrap.h"
 #endif
@@ -560,6 +562,7 @@
 #ifdef ENABLE_SMB_ALERTS
     AlertSmbSetup();
 #endif
+    SetupAlertBNS();
 }
 
 int ActivateOutputPlugin(char *plugin_name, char *plugin_options)
