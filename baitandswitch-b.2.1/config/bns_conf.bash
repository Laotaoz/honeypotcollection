#!/bin/bash
#####################################################################
# Bait N Switch Config Generator (bns_conf.bash)
# Alberto "electr0n" Gonzalez (albertg@cerebro.wwjh.net)
# http://www.violating.us/projects/baitnswitch
#
# This is ugly, yea yea... but it gets the job done.....
#
# R.I.P my sister, i miss ya
#####################################################################


#####################################################################
# Function to create your configuration file (bns.conf)
# This will only be called from within the config
# function. Thus assuring you provided the needed info.
#
# This will create:
# bns.conf
# /switching/switch.vars (only needed at switchcore compile time)
# $snort_path/src/output-plugins/alert_bns.vars (same as ^---)
#####################################################################

conf_write () {

       echo "# bns.conf generated by bns_conf.bash ">bns.conf
       echo "# Bait N Switch Honeypot ">>bns.conf
       echo "# http://www.violating.us/projects/baitnswitch ">>bns.conf

       echo >>bns.conf
       echo >>bns.conf

##################### BNSROUTES CONF #####################

       echo "ext_nic=$ext_nic	  " >>bns.conf
       echo "ext_ip=$ext_ip	  " >>bns.conf
       echo "prod_nic=$prod_nic	  " >>bns.conf
#       echo "prod_ip=$prod_ip	  " >>bns.conf
       echo "prod_gw=$prod_gw     " >>bns.conf
       echo "honey_nic=$honey_nic " >>bns.conf
       echo "honey_gw=$honey_gw   " >>bns.conf
       echo "multi_ip=$multi_ip   " >>bns.conf

##################### SWITCHCORE CONF #####################

       echo "#define FIFO_FILE \"$fifo\"" >../switching/switch.vars
       echo "#define LOCAL_IP \"$ext_ip\"" >>../switching/switch.vars
       echo "#define MARK_INCREMENT $itime" >>../switching/switch.vars
       echo "#define NDOS_PERIOD $ndos_period" >>../switching/switch.vars
       echo "#define NDOS_PMAX $ndos_pmax" >>../switching/switch.vars
       echo "#define MDOS_PERIOD $mdos_period" >>../switching/switch.vars
       echo "#define MDOS_PMAX $mdos_pmax" >>../switching/switch.vars
       echo "#define LOG_DIR \"$logfile\"" >>../switching/switch.vars
       echo "#define BLACK_FILE \"$blist\"" >>../switching/switch.vars

       touch $blist       
##################### PLUGIN CONF #####################

       echo "#define FIFO_FILE \"$fifo\"" >> $snort_path/src/output-plugins/alert_bns.vars

#       echo
#       echo " Done with Configuration, creating routing tables "
#       bns_tables
#       echo

        echo " Done with Configuration, creating routes "
        bns_routes
        echo

        echo -n " exit or menu [e/m]: "
        read em

      case $em in
	   e*|E*)
	   exit 0
	   ;;
	   m*|M*)
	   menu
	   ;;
       esac

}

#####################################################################
# check_config function to check if an existing bns.conf
# is present, if so prompt user for action, else goto menu
# function. This Starting point of the configuration script. Also
# checks for to see if user is root.
#####################################################################

check_config () {

 if [ "$UID" -ne "0" ]; then
   echo
   echo " You need to be root to run this "
   echo
   exit 1
 fi


 if [ -e bns.conf ]; then
   echo -n " bns.conf exists, shall I overwrite? [y/n]: "
   read overwrite

 case $overwrite in

     n*|N*)
     echo " Moving to bns.conf.backup , continuing to menu  "
     echo
     `/bin/mv bns.conf bns.conf.backup`
     menu
     ;;

     y*|Y*)
     echo " Overwriting existing bns.conf file  "
     echo " continuing to menu...    "
     echo
     `/bin/rm -rf bns.conf`
     menu
     ;;

     "")
     echo " No Answer, exiting... "
     exit 1
     ;;

 esac

else
    menu
fi

}


#####################################################################
# config function to prompt user for needed information. Once
# user has completed needed information, this calls conf_write
# function, to write the needed configuration files
#####################################################################

config () {

    echo
    echo "#########################################################"
    echo "# Welcome to the Bait N Switch Configuration Generator.  "
    echo "# This will generate bns.conf for you, enjoy.		   "
    echo "#							   "
    echo "#					- Team Violating   "
    echo "#########################################################"
    echo
    echo -n " External Interface: "
    read ext_nic

    case $ext_nic in

	"")
	echo " No Answer, exiting... "
	exit 1
	;;

    esac

    echo -n " External IP Address: "
    read ext_ip

    case $ext_ip in

	*[a-aZ-Z]*)
	echo " Numbers only, exiting..."
	exit 1
	;;
	"")
	echo " No Answer, exiting... "
	exit 1

    esac

    echo -n " Production Interface: "
    read prod_nic

    case $prod_nic in

	"")
	echo " No Answer, exiting... "
	exit 1
	;;

    esac


    echo -n " Production Gateway IP Address: "
    read prod_gw

    case $prod_gw in

	*[a-aZ-Z]*)
	echo " Numbers only, exiting... "
	exit 1
	;;
	"")
	echo " No Answer, exiting... "
	exit 1

    esac

    echo -n " Honeypot's Interface: "
    read honey_nic

    case $honey_nic in
	"")
	echo " No Answer, exiting... "
	exit 1
	;;
    esac

    echo -n " Honeypot's Gateway: "
    read honey_gw

    case $honey_gw in
	*[a-aZ-Z]*)
	echo " Numbers only, exiting... "
	exit 1
	;;
	"")
	echo " No Answer, exiting... "
	exit 1
	;;
    esac

    echo -n " IP of <both> Honeypot and Production (Same IP, Diff GW): "
    read multi_ip

    case $multi_ip in
	*[a-aZ-Z]*)
	echo " Numbers only, exiting... "
	exit 1
	;;
	"")
	echo " No Answer, exiting... "
	exit 1
	;;
    esac

    echo -n " Length of Time (in minutes) that the mark time should be incremented: "
    read itime

    case $itime in
	"")
	echo " No Answer, exiting... "
	exit 1
	;;
    esac

    echo -n " Length of Time DoS Protection: Max Alerts (how many alerts is 'too many' within dos_time): "
    read mdos_pmax

    case $mdos_pmax in
	*[a-aZ-Z]*)
	echo " Numbers only, exiting... "
	exit 1
	;;
	"")
	echo " No Answer, exiting... "
	exit 1
	;;
    esac

    echo -n " Length of Time DoS Protection: Period ((in seconds) to look for too many marks from a single IP): "
    read mdos_period

    case $mdos_period in
	*[a-aZ-Z]*)
	echo " Numbers only, exiting... "
	exit 1
	;;
	"")
	echo " No Answer, exiting... "
	exit 1
	;;
    esac

    echo -n " IP DoS Protection: How many Ip's per a certain amount of time is too many? "
    read ndos_pmax

    case $ndos_pmax in
	*[a-aZ-Z]*)
	echo " Numbers only, exiting... "
	exit 1
	;;
	"")
	echo " No Answer, exiting... "
	exit 1
	;;
    esac

    echo -n " IP DoS Protection: Within what length of time should a certain number of IP's be too many?"
    read ndos_period

    case $ndos_period in
	*[a-aZ-Z]*)
	echo " Numbers only, exiting... "
	exit 1
	;;
	"")
	echo " No Answer, exiting... "
	exit 1
	;;
    esac

    echo -n " Fifo File Location (ie: /fifo/bnsfifo): "
    read fifo

    case $fifo in
	"")
	echo " No Answer, exiting... "
	exit 1
	;;
    esac

    echo -n " Log Location (ie: /var/log/switchcore.log): "
    read logfile

    case $logfile in
	"")
	echo " No Answer, exiting... "
	exit 1
	;;
    esac
    
    echo -n " Blacklist Location (ie: /etc/bns_blist): "
    read blist

    case $blist in
	"")
	echo " No Answer, exiting... "
	exit 1
	;;
    esac

    echo -n " Path to snort 1.9.0 directory (ie: /root/snort-1.9.0): "
    read snort_path

    case $snort_path in
	"")
	echo " No Answer, exiting... "
	exit 1
	;;
    esac
    
    echo
    echo " Done with variables, writing configuration(s) file "

	if [ $logfile != "" ]; then
	   CONF=1
	else
	   CONF=0
	fi

    conf_write

}

#####################################################################
# snort_patch function to patch snort for the user, prompts user
# for path to snort 1.9.0 and bns.diff.
#####################################################################

snort_patch () {

    if [ ! -e bns.conf ]; then
	echo " You haven't ran option 1 "
	sleep 1
	menu
    fi


    echo -n " Path to bns.diff (ie: /root/bns/snort/bns.diff) "
    read diff_path

    case $diff_path in
	"")
	echo " No Answer, exiting... "
	exit 1
	;;
    esac

	cd $snort_path
	patch -p1 < $diff_path

	echo " done patching..."

     echo
     echo -n " exit or menu [e/m]: "
     read EM

     case $EM in
	 e*|E*)
	 exit 0
	 ;;
	 m*|M*)
	 menu
	 ;;
     esac


}

#####################################################################
# menu function, pretty straight forward
#####################################################################

menu () {

    clear
    echo " Menu for Bait N Switch Configuration (GO IN ORDER)"
    echo
    echo " 1) Set Up Routing Tables. (**RUN ONCE PER MACHINE**)"
    echo " 2) Configuration "
    echo " 3) Patch Snort (ONLY AFTER OPTION 2)"
    echo " 4) Exit "
    echo
    echo -n " Your Choice: "
    read menu

    case $menu in

	1)
	bns_tables
	;;
	
	2)
	config
	;;

	3)
	snort_patch
	;;

	4)
	exit 0
	;;

	*[^1-4]*)
	echo " Numbers from 1-3 please, exiting... "
	;;

	"")
	echo " No Answer, exiting... "
	exit 1
	;;

    esac

}

#####################################################################
# bns_routes function creates /routing/bnsroutes.bash with the
# input gathered from the config function. This bash script
# (bnsroutes.bash) will need to be executed upon reboot.
#####################################################################

bns_routes () {

> ../routing/bnsroutes.bash

echo "#!/bin/bash " >>../routing/bnsroutes.bash

echo >>../routing/bnsroutes.bash
echo >>../routing/bnsroutes.bash

echo "ext_nic=$ext_nic	   " >>../routing/bnsroutes.bash
echo "ext_ip=$ext_ip	   " >>../routing/bnsroutes.bash
echo "prod_nic=$prod_nic   " >>../routing/bnsroutes.bash
#echo "prod_ip=$prod_ip	   " >>../routing/bnsroutes.bash
echo "prod_gw=$prod_gw     " >>../routing/bnsroutes.bash
echo "honey_nic=$honey_nic " >>../routing/bnsroutes.bash
echo "honey_gw=$honey_gw   " >>../routing/bnsroutes.bash
echo "multi_ip=$multi_ip   " >>../routing/bnsroutes.bash

echo >>../routing/bnsroutes.bash
echo >>../routing/bnsroutes.bash

echo "ip rule add from $multi_ip/24 table my_out"   >>../routing/bnsroutes.bash
echo "ip rule add to $multi_ip/32 table production" >>../routing/bnsroutes.bash
echo "ip rule add fwmark 1 table honeypot"	    >>../routing/bnsroutes.bash

echo "ip route add $multi_ip/32 via $prod_gw dev $prod_nic table production proto static" >>../routing/bnsroutes.bash
echo "ip route add $multi_ip/32 via $honey_gw dev $honey_nic table honeypot proto static" >>../routing/bnsroutes.bash
echo "ip route add 0/0 via $ext_ip dev $ext_nic" >>../routing/bnsroutes.bash

menu
}

#####################################################################
# bns_tables() function to create the necessary tables in
# /etc/iproute2/rt_tables file. This is only called from
# conf_write() function, thus assuring you have completed the
# required input.
#####################################################################

bns_tables () {


`/bin/echo '101      production' >> /etc/iproute2/rt_tables`
`/bin/echo '102      honeypot' >> /etc/iproute2/rt_tables`
`/bin/echo '103      my_out' >> /etc/iproute2/rt_tables`

menu
}

# The starting point for bns_conf.bash.

check_config


